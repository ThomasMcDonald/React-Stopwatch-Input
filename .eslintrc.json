// This üëè is üëè a üëè mess üëè
// fix it eventually to be more specific to what I want
{
    "env": {
        "node": true,
        "browser": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended", 
        "plugin:react/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 12,
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "plugins": [
        "react",
        "@typescript-eslint"
    ],
    "settings": {
        "react": {
          "createClass": "createReactClass", // Regex for Component Factory to use,
                                             // default to "createReactClass"
          "pragma": "React",  // Pragma to use, default to "React"
          "fragment": "Fragment",  // Fragment to use (may be a property of <pragma>), default to "Fragment"
          "version": "detect", // React version. "detect" automatically picks the version you have installed.
                               // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
                               // default to latest and warns if missing
                               // It will default to "detect" in the future
          "flowVersion": "0.53" // Flow version
        },
        "propWrapperFunctions": [
            // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
            "forbidExtraProps",
            {"property": "freeze", "object": "Object"},
            {"property": "myFavoriteWrapper"}
        ],
        "componentWrapperFunctions": [
            // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
            "observer", // `property`
            {"property": "styled"}, // `object` is optional
            {"property": "observer", "object": "Mobx"},
            {"property": "observer", "object": "<pragma>"} // sets `object` to whatever value `settings.react.pragma` is set to
        ],
        "linkComponents": [
          // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
          "Hyperlink",
          {"name": "Link", "linkAttribute": "to"}
        ]
    },
    "rules": {
        "react/jsx-uses-react": "error",
        "react/jsx-uses-vars": "error",
        "react/jsx-indent": ["warn", "tab"], // [2, "tab",  {"indentLogicalExpressions": true}],
        "react/jsx-indent-props":  ["warn", "tab"],
        "react/jsx-filename-extension": [2, { "extensions": [".js", ".jsx", ".ts", ".tsx"] }],
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "@typescript-eslint/explicit-module-boundary-types": "warn",
        "indent": ["warn", "tab", { "SwitchCase": 1 }],
		"no-tabs": 0,
        "linebreak-style": 0,
		"no-console": ["warn", { "allow": ["error"] }],
		"comma-dangle": 0,
		"consistent-return": 0,
		"no-underscore-dangle": 0,
		"eol-last": 0,
		"padding-line-between-statements": [1, 
			{ "blankLine": "always", "prev": "*", "next": "return" },
			{ "blankLine": "always", "prev": "block-like", "next": "*" },
			{ "blankLine": "always", "prev": "*", "next": "block-like" }
		],
		"no-plusplus": 0,
		"no-cond-assign": ["error"],
		"max-len": [2, {
			"code": 200,
			"ignoreComments": true
		}],
		"prefer-destructuring": [2, {
			"object": true,
			"array": false
		}],
		"no-restricted-syntax": ["error", "ForInStatement", "LabeledStatement", "WithStatement"],
		"no-param-reassign": 0,
		"nonblock-statement-body-position": ["error", "beside"],
		"no-multiple-empty-lines": ["warn", { "max": 1, "maxEOF": 0 }],
		"curly": ["warn"],
        "sort-keys": ["error", "asc", {"caseSensitive": false}],
        "object-curly-spacing": ["warn", "always"]
    }
}
